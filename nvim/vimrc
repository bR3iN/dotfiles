"  Variables {{{
" Set Leader Keys
let maplocalleader = " "
let mapleader = " "

" For Plugins
let g:tmux_navigator_no_mappings = 1
let g:NERDCreateDefaultMappings = 0
let b:surround_66 = "{\r}\1\1"

if has("nvim") && executable('nvr')
    let $VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
endif
" }}}

" General Options {{{

" Vim only {{{
if !has("nvim")
    set nocompatible
    syntax on
    filetype indent plugin on 
    runtime ftplugin/man.vim

    set autoindent
    set autoread
    set backspace=indent,eol,start
    set display=lastline
    set history=10000
    set hlsearch
    set incsearch
    set laststatus=2 
    set wildmenu
endif
" }}}

set cmdheight=2
"set clipboard+=unnamedplus
set confirm
set hidden 
set ignorecase
set mouse=a
set number
set relativenumber
set ruler
set scrolloff=1
set showcmd
set smartcase "requires ignorecase
set splitbelow
set splitright
set wildmode=longest:full,full
set wildignorecase

" Undo behaviour
set undofile
let &undodir=$HOME . "/.local/share/" . (has("nvim") ? "nvim" : "vim") . "/undo"

"" Wrap behaviour
set breakindent
set wrap

" Default tab behaviour
set shiftwidth=4
set tabstop=4
set expandtab
" }}}

" Navigation {{{
" Open init.lua and vimrc
nnoremap <silent> <leader>ev :<c-u>edit   $MYVIMRC<CR>
nnoremap <silent> <leader>sv :<c-u>split  $MYVIMRC<CR>
nnoremap <silent> <leader>vv :<c-u>vsplit $MYVIMRC<CR>
if has('nvim')
    nnoremap <expr><silent> <leader>eV ':edit   '. fnamemodify($MYVIMRC, ':p:h').'/vimrc<CR>'
    nnoremap <expr><silent> <leader>sV ':split  '. fnamemodify($MYVIMRC, ':p:h').'/vimrc<CR>'
    nnoremap <expr><silent> <leader>vV ':vsplit '. fnamemodify($MYVIMRC, ':p:h').'/vimrc<CR>'
endif

nnoremap <leader>ee :!ls<cr>:e<space>
nnoremap <leader>se :!ls<cr>:sp<space>
nnoremap <leader>ve :!ls<cr>:vs<space>

" Buffer navigation
nnoremap <leader>b  :<C-u>ls<cr>:<c-u>b<space>
nnoremap <leader>sb	:<C-u>ls<cr>:<c-u>sb<space>
nnoremap <leader>vb	:<C-u>ls<cr>:<c-u>vert sb<space>
nnoremap <leader>db	:<C-u>ls<cr>:<c-u>bd<space>

"nnoremap ]b :<C-u>bnext<CR>
"nnoremap [b :<C-u>bprev<CR>
"nnoremap ]B :<C-u>blast<CR>
"nnoremap [B :<C-u>bfirst<CR>

" Navigate quickfix and location lists
nnoremap ]q         :<C-u>cnext<CR>
nnoremap [q         :<C-u>cprev<CR>
nnoremap ]Q         :<C-u>clast<CR>
nnoremap [Q         :<C-u>cfirst<CR>
nnoremap <leader>qo :<C-u>copen<CR>
nnoremap <leader>qc :<C-u>cclose<CR>

nnoremap ]l         :<C-u>lnext<CR>
nnoremap [l         :<C-u>lprev<CR>
nnoremap ]L         :<C-u>llast<CR>
nnoremap [L         :<C-u>lfirst<CR>
nnoremap <leader>lo :<C-u>lopen<CR>
nnoremap <leader>lc :<C-u>lclose<CR>
" }}}

" Miscellaneous mappings {{{
nnoremap Y y$
nnoremap <C-c> <C-^>

nnoremap <silent> <C-L> :<c-u>nohlsearch<CR><C-L>

tnoremap <Esc> <C-\><C-n>
tnoremap <C-v><Esc> <Esc>

nnoremap <leader>w  :<c-u>w<cr>
nnoremap <leader>qq :<c-u>q<cr>

nnoremap <leader>mk :make<CR>

cnoremap <M-p> <up>
cnoremap <M-n> <down>
cnoremap <M-f> <C-right>
cnoremap <M-b> <C-left>

inoremap <c-u> <esc>viwUea
"nnoremap <leader>ul ~h
"nnoremap <leader>uw viwU

" (c)hange cwd to the directory containing the (c)urrent file
nnoremap <leader>cc :cd %:h<CR>

" Resize windows
nnoremap <M-,> <C-w>+
nnoremap <M-.> <C-w>-
nnoremap <M-<> <C-w><
nnoremap <M->> <C-w>>

" 'g{' and 'g}' {{{
xnoremap <expr><silent>g} '<esc>'.v:count1.':<c-u>call MoveInParagraph(1, 0)<cr>'
xnoremap <expr><silent>g{ '<esc>'.v:count1.':<c-u>call MoveInParagraph(1, 1)<cr>'
nnoremap       <silent>g}                   :<c-u>call MoveInParagraph(0, 0)<cr>
nnoremap       <silent>g{                   :<c-u>call MoveInParagraph(0, 1)<cr>
onoremap       <silent>g}                   :<c-u>call MoveInParagraph(0, 0)<cr>
onoremap       <silent>g{                   :<c-u>call MoveInParagraph(0, 1)<cr>
" }}}

" }}}

" Configure Shared Plugins {{{

 "NERDCommenter {{{
nmap     <silent>  <Plug>NERDCommenterToggle
vmap     <silent>  <Plug>NERDCommenterToggle
inoremap <silent>  <Esc>:exec "normal \<Plug>NERDCommenterToggle"<cr>a
" }}}

" NERDTree {{{
"nnoremap <silent> <leader>nt :<c-u>NERDTreeToggle<CR>
"nnoremap <silent> <leader>nf  :<c-u>NERDTreeFind<CR>
	"" Exit Vim if NERDTree is the only window left.
"augroup plugin_NERDTree
    "autocmd!
    ""autocmd BufEnter * NERDTreeFind | wincmd p
    "autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
                "\ quit | endif
"augroup END
" }}}

" Tmux Navigator {{{
nnoremap <silent> <M-h> 	:<C-u>TmuxNavigateLeft<CR>
nnoremap <silent> <M-j> 	:<C-u>TmuxNavigateDown<CR>
nnoremap <silent> <M-k> 	:<C-u>TmuxNavigateUp<CR>
nnoremap <silent> <M-l> 	:<C-u>TmuxNavigateRight<CR>
nnoremap <silent> <M-left> 	:<C-u>TmuxNavigateLeft<CR>
nnoremap <silent> <M-down> 	:<C-u>TmuxNavigateDown<CR>
nnoremap <silent> <M-up> 	:<C-u>TmuxNavigateUp<CR>
nnoremap <silent> <M-right> :<C-u>TmuxNavigateRight<CR>

tnoremap <silent> <M-h> 	<C-\><C-n>:TmuxNavigateLeft<CR>
tnoremap <silent> <M-j> 	<C-\><C-n>:TmuxNavigateDown<CR>
tnoremap <silent> <M-k> 	<C-\><C-n>:TmuxNavigateUp<CR>
tnoremap <silent> <M-l> 	<C-\><C-n>:TmuxNavigateRight<CR>
tnoremap <silent> <M-left> 	<C-\><C-n>:TmuxNavigateLeft<CR>
tnoremap <silent> <M-down> 	<C-\><C-n>:TmuxNavigateDown<CR>
tnoremap <silent> <M-up> 	<C-\><C-n>:TmuxNavigateUp<CR>
tnoremap <silent> <M-right> <C-\><C-n>:TmuxNavigateRight<CR>
" }}}

" rust.vim {{{
let g:rust_conceal = 1
let g:rust_conceal_mod_path = 1
let g:rust_fold = 2
"let g:rustfmt_autosave = 1
" }}}

" }}}

" Autocmd {{{
augroup vimrc
    autocmd!

    " Autoload config files on save
    if has("nvim")
        autocmd BufWritePost ~/.{dotfiles,config}/nvim/{*.{vim,lua},vimrc} lua dofile(vim.env.MYVIMRC)
    else
        autocmd BufWritePost ~/.vim/{*.vim,vimrc} source $MYVIMRC
    endif

    autocmd FileType vim                    setlocal foldmethod=marker
    autocmd FileType tmux                   setlocal foldmethod=marker
    autocmd BufRead  ~/.{config,dotfiles}/* setlocal foldmethod=marker

    autocmd FileType lua   nnoremap <buffer> <leader>rr :lua dofile(vim.fn.expand('%'))<cr>
    "autocmd FileType lua   nnoremap <buffer> <leader>rr :w !lua
    autocmd FileType sh    nnoremap <buffer> <leader>rr :w !bash<cr>
    autocmd FileType fish  nnoremap <buffer> <leader>rr :w !fish<cr>

	autocmd BufWritePre /tmp/* setlocal noundofile
augroup END
" }}}

" Appearence {{{
if !has("nvim")
    colorscheme ron
endif

" Otherwise set in /usr/share/nvim/runtime/syntax/syncolor.vim
hi Comment ctermfg=8
hi Constant ctermfg=5
hi Special ctermfg=17
hi Identifier ctermfg=6
hi Statement ctermfg=3
hi PreProc ctermfg=12
hi Type ctermfg=10
hi Underlined ctermfg=12
hi Ignore ctermfg=17

hi Conceal ctermbg=18
hi CursorColumn ctermbg=18
hi CursorLineNr ctermfg=7
hi Directory ctermfg=14
hi FoldColumn ctermbg=18
hi Folded ctermbg=18
hi LineNr ctermfg=8
"hi MoreMsg ctermfg=10
hi MoreMsg ctermfg=16
hi Pmenu ctermbg=18 ctermfg=11
hi PmenuSbar ctermbg=19
hi PmenuSel ctermbg=8 ctermfg=11 cterm=bold
hi PmenuThump ctermbg=7
"hi Question ctermfg=10
hi Question ctermfg=16
hi SignColumn ctermbg=18
hi SpecialKey ctermfg=6
hi StatusLine ctermbg=8 ctermfg=2 cterm=bold
hi StatusLineNC ctermbg=19 ctermfg=2 cterm=NONE
hi TabLine ctermbg=18
hi Title ctermfg=13
hi VertSplit cterm=None ctermfg=8 ctermbg=NONE
hi Visual ctermbg=19
hi WarningMsg ctermfg=9
set fillchars+=vert:\â”‚


hi LspDiagnosticsDefaultError ctermfg=9
hi LspDiagnosticsDefaultHint ctermfg=13
hi LspDiagnosticsDefaultInformation ctermfg=10
hi LspDiagnosticsDefaultWarning ctermfg=11
" }}}

" Load Vim Plugins {{{
if !has("nvim")
    call plug#begin('~/.vim/plugged')
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-commentary'
    Plug 'christoomey/vim-tmux-navigator'
    call plug#end()
endif
" }}}

" Functions {{{
" Used in g} and g{ keybingings
function! MoveInParagraph(visual, backwards)
    let to_column = (col('.') == 1) ? '' : col('.') - 1.'l'
    exec 'normal! '.(a:visual ? 'gv' : '').v:count1.(a:backwards == 0 ? '}' : '{')
    if a:backwards
        exec 'normal! '.(line('.') == 1         ? '^' : 'j').to_column
    else
        exec 'normal! '.(line('.') == line('$') ? '^' : 'k').to_column
    endif
endfunction
" }}}
