(undo-tree-save-format-version . 1)
"2c9b46a927b29ce57fd0b62b1e2644e763ace08c"
[nil current nil nil (26664 46613 611425 529000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1661 . 1662) (nil fontified nil 662 . 1662) (662 . 1662) (t 26664 46457 210845 643000)) ((#("(defun smooth-scroll--get-easing-fn ()
  \"Return a one-argument easing function for `smooth-scroll-easing`.
Maps progress [0,1] to eased value [0,1], errors if unrecognized.\"
  (pcase smooth-scroll-easing
    ('linear    (lambda (x) x))
    ('quadratic (lambda (x) (* x x)))
    ('cubic     (lambda (x) (* x x x)))
    ('quartic   (lambda (x) (expt x 4)))
    ('quintic   (lambda (x) (expt x 5)))
    ('sine      (lambda (x) (- 1 (cos (* x (/ pi 2))))))
    ('circular  (lambda (x) (- 1 (sqrt (- 1 (* x x))))))
    (_ (error \"smooth-scroll: Unknown easing: %S\" smooth-scroll-easing))))

(defun smooth-scroll--get-delay-fn ()
  \"Return a two-argument delay function based on the current easing.
The returned function takes STEP and TOTAL and returns the fraction of TOTAL-TIME.\"
  (let ((ef (smooth-scroll--get-easing-fn)))
    (lambda (step total)
      (let* ((x1 (/ (float (1- step)) total))
             (x2 (/ (float step)       total)))
        (- (funcall ef x2)
           (funcall ef x1))))))" 0 1 (fontified nil) 1 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 35 (face font-lock-function-name-face fontified nil) 35 41 (fontified nil) 41 174 (face font-lock-doc-face fontified nil) 174 178 (fontified nil) 178 183 (face font-lock-keyword-face fontified nil) 183 222 (fontified nil) 222 228 (face font-lock-keyword-face fontified nil) 228 254 (fontified nil) 254 260 (face font-lock-keyword-face fontified nil) 260 292 (fontified nil) 292 298 (face font-lock-keyword-face fontified nil) 298 332 (fontified nil) 332 338 (face font-lock-keyword-face fontified nil) 338 373 (fontified nil) 373 379 (face font-lock-keyword-face fontified nil) 379 414 (fontified nil) 414 420 (face font-lock-keyword-face fontified nil) 420 471 (fontified nil) 471 477 (face font-lock-keyword-face fontified nil) 477 519 (fontified nil) 519 524 (face font-lock-warning-face fontified nil) 524 525 (fontified nil) 525 560 (face font-lock-string-face fontified nil) 560 588 (fontified nil) 588 593 (face font-lock-keyword-face fontified nil) 593 594 (fontified nil) 594 621 (face font-lock-function-name-face fontified nil) 621 627 (fontified nil) 627 777 (face font-lock-doc-face fontified nil) 777 781 (fontified nil) 781 784 (face font-lock-keyword-face fontified nil) 784 828 (fontified nil) 828 834 (face font-lock-keyword-face fontified nil) 834 855 (fontified nil) 855 859 (face font-lock-keyword-face fontified nil) 859 969 (fontified nil) 969 999 (fontified nil) 999 1000 (fontified nil rear-nonsticky nil)) . 662) (undo-tree-id356 . -585) (undo-tree-id357 . -175) (undo-tree-id358 . -175) (undo-tree-id359 . -175) (undo-tree-id360 . -585) (undo-tree-id361 . -585) (undo-tree-id362 . -585) (undo-tree-id363 . -585) (undo-tree-id364 . -585) (undo-tree-id365 . -585) (undo-tree-id366 . -585) (undo-tree-id367 . -585) (undo-tree-id368 . -585) (undo-tree-id369 . -595) (undo-tree-id370 . -595) (undo-tree-id371 . -595) (undo-tree-id372 . -595) (undo-tree-id373 . -595) (undo-tree-id374 . -595) (undo-tree-id375 . -596) (undo-tree-id376 . -596) (undo-tree-id377 . -596) (undo-tree-id378 . -596) (undo-tree-id379 . -596) (undo-tree-id380 . -596) (undo-tree-id381 . -597) (undo-tree-id382 . -597) (undo-tree-id383 . -597) (undo-tree-id384 . -597) (undo-tree-id385 . -597) (undo-tree-id386 . -597) (undo-tree-id387 . -598) (undo-tree-id388 . -598) (undo-tree-id389 . -598) (undo-tree-id390 . -598) (undo-tree-id391 . -598) (undo-tree-id392 . -598) (undo-tree-id393 . -599) (undo-tree-id394 . -599) (undo-tree-id395 . -599) (undo-tree-id396 . -599) (undo-tree-id397 . -599) (undo-tree-id398 . -599) (undo-tree-id399 . -600) (undo-tree-id400 . -600) (undo-tree-id401 . -600) (undo-tree-id402 . -600) (undo-tree-id403 . -600) (undo-tree-id404 . -600) (undo-tree-id405 . -601) (undo-tree-id406 . -601) (undo-tree-id407 . -601) (undo-tree-id408 . -601) (undo-tree-id409 . -601) (undo-tree-id410 . -601) (undo-tree-id411 . -602) (undo-tree-id412 . -602) (undo-tree-id413 . -602) (undo-tree-id414 . -602) (undo-tree-id415 . -602) (undo-tree-id416 . -602) (undo-tree-id417 . -603) (undo-tree-id418 . -603) (undo-tree-id419 . -603) (undo-tree-id420 . -603) (undo-tree-id421 . -603) (undo-tree-id422 . -603) (undo-tree-id423 . -604) (undo-tree-id424 . -604) (undo-tree-id425 . -604) (undo-tree-id426 . -604) (undo-tree-id427 . -604) (undo-tree-id428 . -604) (undo-tree-id429 . -605) (undo-tree-id430 . -605) (undo-tree-id431 . -605) (undo-tree-id432 . -605) (undo-tree-id433 . -605) (undo-tree-id434 . -605) (undo-tree-id435 . -606) (undo-tree-id436 . -606) (undo-tree-id437 . -606) (undo-tree-id438 . -606) (undo-tree-id439 . -606) (undo-tree-id440 . -606) (undo-tree-id441 . -607) (undo-tree-id442 . -607) (undo-tree-id443 . -607) (undo-tree-id444 . -607) (undo-tree-id445 . -607) (undo-tree-id446 . -607) (undo-tree-id447 . -608) (undo-tree-id448 . -608) (undo-tree-id449 . -608) (undo-tree-id450 . -608) (undo-tree-id451 . -608) (undo-tree-id452 . -608) (undo-tree-id453 . -608) (undo-tree-id454 . -608) (undo-tree-id455 . -608) (undo-tree-id456 . -608) (undo-tree-id457 . -608) (undo-tree-id458 . -608) (undo-tree-id459 . -608) (undo-tree-id460 . -608) (undo-tree-id461 . -608) (undo-tree-id462 . -608) (undo-tree-id463 . -608) (undo-tree-id464 . -608) (undo-tree-id465 . -608) (undo-tree-id466 . -608) (undo-tree-id467 . -608) (undo-tree-id468 . -608) (undo-tree-id469 . -608) (undo-tree-id470 . -608) (undo-tree-id471 . -608) (undo-tree-id472 . -608) (undo-tree-id473 . -608) (undo-tree-id474 . -608) (undo-tree-id475 . -608) (undo-tree-id476 . -608) (undo-tree-id477 . -608) (undo-tree-id478 . -608) (undo-tree-id479 . -608) (undo-tree-id480 . -608) (undo-tree-id481 . -608) (undo-tree-id482 . -608) (undo-tree-id483 . -608) (undo-tree-id484 . -608) (undo-tree-id485 . -608) (undo-tree-id486 . -608) (undo-tree-id487 . -608) (undo-tree-id488 . -608) (undo-tree-id489 . -608) (undo-tree-id490 . -608) (undo-tree-id491 . -608) (nil fontified t 1521 . 1631) (nil fontified t 1517 . 1521) (nil fontified t 1496 . 1517) (nil fontified t 1490 . 1496) (nil fontified t 1446 . 1490) (nil fontified t 1443 . 1446) (nil fontified t 1439 . 1443) (nil fontified t 1289 . 1439) (nil fontified t 1283 . 1289) (nil fontified t 1256 . 1283) (nil fontified t 1255 . 1256) (nil fontified t 1250 . 1255) (nil fontified t 1222 . 1250) (nil fontified t 1187 . 1222) (nil fontified t 1186 . 1187) (nil fontified t 1181 . 1186) (nil fontified t 1139 . 1181) (nil fontified t 1133 . 1139) (nil fontified t 1082 . 1133) (nil fontified t 1076 . 1082) (nil fontified t 1041 . 1076) (nil fontified t 1035 . 1041) (nil fontified t 1000 . 1035) (nil fontified t 994 . 1000) (nil fontified t 960 . 994) (nil fontified t 954 . 960) (nil fontified t 922 . 954) (nil fontified t 916 . 922) (nil fontified t 890 . 916) (nil fontified t 884 . 890) (nil fontified t 845 . 884) (nil fontified t 840 . 845) (nil fontified t 836 . 840) (nil fontified t 703 . 836) (nil fontified t 697 . 703) (nil fontified t 669 . 697) (nil fontified t 668 . 669) (nil fontified t 663 . 668) (nil fontified t 662 . 663) (nil rear-nonsticky t 1661 . 1662)) (26664 46613 411144 310000) 0 nil] [nil nil ((2364 . 2379) (#("           " 0 11 (fontified t)) . 2364) (2333 . 2345) (#("        " 0 8 (fontified t)) . 2333) (2281 . 2298) (#("             " 0 13 (fontified t)) . 2281) (2231 . 2241) (#("      " 0 6 (fontified t)) . 2231) (2202 . 2210) (#("    " 0 4 (fontified t)) . 2202) (2153 . 2159) (#("  " 0 2 (fontified t)) . 2153) (1996 . 2002) (#("  " 0 2 (fontified t)) . 1996) (1954 . 1958) (1874 . 1882) (#("    " 0 4 (fontified t)) . 1874) (1813 . 1821) (#("    " 0 4 (fontified t)) . 1813) (1752 . 1760) (#("    " 0 4 (fontified t)) . 1752) (1707 . 1715) (#("    " 0 4 (fontified t)) . 1707) (1662 . 1670) (#("    " 0 4 (fontified t)) . 1662) (1618 . 1626) (#("    " 0 4 (fontified t)) . 1618) (1576 . 1584) (#("    " 0 4 (fontified t)) . 1576) (1540 . 1548) (#("    " 0 4 (fontified t)) . 1540) (1506 . 1512) (#("  " 0 2 (fontified t)) . 1506) (1366 . 1372) (#("  " 0 2 (fontified t)) . 1366) (1323 . 1327) (1284 . 1288) (1250 . 1254) (1196 . 1200) (1148 . 1152) (1116 . 1120) (1064 . 1068) (943 . 947) (867 . 871) (nil rear-nonsticky nil 2290 . 2291) (nil fontified nil 1291 . 2291) (1291 . 2291) (t 26664 46457 210845 643000)) ((#("(defun smooth-scroll--get-easing-fn ()
  \"Return a one-argument easing function for `smooth-scroll-easing`.
Maps progress [0,1] to eased value [0,1], errors if unrecognized.\"
  (pcase smooth-scroll-easing
    ('linear    (lambda (x) x))
    ('quadratic (lambda (x) (* x x)))
    ('cubic     (lambda (x) (* x x x)))
    ('quartic   (lambda (x) (expt x 4)))
    ('quintic   (lambda (x) (expt x 5)))
    ('sine      (lambda (x) (- 1 (cos (* x (/ pi 2))))))
    ('circular  (lambda (x) (- 1 (sqrt (- 1 (* x x))))))
    (_ (error \"smooth-scroll: Unknown easing: %S\" smooth-scroll-easing))))

(defun smooth-scroll--get-delay-fn ()
  \"Return a two-argument delay function based on the current easing.
The returned function takes STEP and TOTAL and returns the fraction of TOTAL-TIME.\"
  (let ((ef (smooth-scroll--get-easing-fn)))
    (lambda (step total)
      (let* ((x1 (/ (float (1- step)) total))
             (x2 (/ (float step)       total)))
        (- (funcall ef x2)
           (funcall ef x1))))))" 0 1 (fontified nil) 1 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 35 (face font-lock-function-name-face fontified nil) 35 39 (fontified nil) 39 41 (fontified nil) 41 108 (face font-lock-doc-face fontified nil) 108 174 (face font-lock-doc-face fontified nil) 174 175 (fontified nil) 175 177 (fontified nil) 177 178 (fontified nil) 178 183 (face font-lock-keyword-face fontified nil) 183 205 (fontified nil) 205 209 (fontified nil) 209 222 (fontified nil) 222 228 (face font-lock-keyword-face fontified nil) 228 237 (fontified nil) 237 241 (fontified nil) 241 254 (fontified nil) 254 260 (face font-lock-keyword-face fontified nil) 260 275 (fontified nil) 275 279 (fontified nil) 279 292 (fontified nil) 292 298 (face font-lock-keyword-face fontified nil) 298 315 (fontified nil) 315 319 (fontified nil) 319 332 (fontified nil) 332 338 (face font-lock-keyword-face fontified nil) 338 356 (fontified nil) 356 360 (fontified nil) 360 373 (fontified nil) 373 379 (face font-lock-keyword-face fontified nil) 379 397 (fontified nil) 397 401 (fontified nil) 401 414 (fontified nil) 414 420 (face font-lock-keyword-face fontified nil) 420 454 (fontified nil) 454 458 (fontified nil) 458 471 (fontified nil) 471 477 (face font-lock-keyword-face fontified nil) 477 511 (fontified nil) 511 515 (fontified nil) 515 519 (fontified nil) 519 524 (face font-lock-warning-face fontified nil) 524 525 (fontified nil) 525 560 (face font-lock-string-face fontified nil) 560 586 (fontified nil) 586 587 (fontified nil) 587 588 (fontified nil) 588 593 (face font-lock-keyword-face fontified nil) 593 594 (fontified nil) 594 621 (face font-lock-function-name-face fontified nil) 621 625 (fontified nil) 625 627 (fontified nil) 627 694 (face font-lock-doc-face fontified nil) 694 777 (face font-lock-doc-face fontified nil) 777 778 (fontified nil) 778 780 (fontified nil) 780 781 (fontified nil) 781 784 (face font-lock-keyword-face fontified nil) 784 823 (fontified nil) 823 827 (fontified nil) 827 828 (fontified nil) 828 834 (face font-lock-keyword-face fontified nil) 834 848 (fontified nil) 848 854 (fontified nil) 854 855 (fontified nil) 855 859 (face font-lock-keyword-face fontified nil) 859 894 (fontified nil) 894 907 (fontified nil) 907 942 (fontified nil) 942 950 (fontified nil) 950 969 (fontified nil) 969 980 (fontified nil) 980 999 (fontified nil) 999 1000 (fontified nil rear-nonsticky nil)) . 1291) (undo-tree-id336 . -1000) (undo-tree-id337 . -969) (undo-tree-id338 . -1000) (nil fontified t 2068 . 2069) (nil fontified t 1985 . 2068) (nil fontified t 1877 . 1878) (nil fontified t 1465 . 1466) (nil fontified t 1399 . 1465) (nil rear-nonsticky t 2290 . 2291) (#("    " 0 4 (fontified t)) . 867) (#("    " 0 4 (fontified t)) . 943) (#("    " 0 4 (fontified t)) . 1064) (#("    " 0 4 (fontified t)) . 1116) (#("    " 0 4 (fontified t)) . 1148) (#("    " 0 4 (fontified t)) . 1196) (#("    " 0 4 (fontified t)) . 1250) (#("    " 0 4 (fontified t)) . 1284) (#("    " 0 4 (fontified t)) . 1323) (1366 . 1368) (#("      " 0 6 (fontified t)) . 1366) (1506 . 1508) (#("      " 0 6 (fontified t)) . 1506) (1540 . 1544) (#("        " 0 8 (fontified t)) . 1540) (1576 . 1580) (#("        " 0 8 (fontified t)) . 1576) (1618 . 1622) (#("        " 0 8 (fontified t)) . 1618) (1662 . 1666) (#("        " 0 8 (fontified t)) . 1662) (1707 . 1711) (#("        " 0 8 (fontified t)) . 1707) (1752 . 1756) (#("        " 0 8 (fontified t)) . 1752) (1813 . 1817) (#("        " 0 8 (fontified t)) . 1813) (1874 . 1878) (#("        " 0 8 (fontified t)) . 1874) (#("    " 0 4 (fontified t)) . 1954) (1996 . 1998) (#("      " 0 6 (fontified t)) . 1996) (2153 . 2155) (#("      " 0 6 (fontified t)) . 2153) (2202 . 2206) (#("        " 0 8 (fontified t)) . 2202) (2231 . 2237) (#("          " 0 10 (fontified t)) . 2231) (2281 . 2294) (#("                 " 0 17 (fontified t)) . 2281) (2333 . 2341) (#("            " 0 12 (fontified t)) . 2333) (2364 . 2375) (#("               " 0 3 (fontified t) 3 15 (fontified t)) . 2364)) (26664 46557 720508 771000) 0 nil] [nil nil ((2027 . 2030) 1924 (t 26656 55345 157251 134000)) ((#("
  " 0 3 (fontified t)) . 2027)) (26664 46449 438227 787000) 0 nil])
([nil nil ((#("(defun smooth-scroll--get-delay-fn ()
  \"Return a one-argument easing function for `smooth-scroll-easing`.
Maps progress [0,1] to eased value [0,1], errors if unrecognized.\"
  (pcase smooth-scroll-easing
;;   \"Return a two-argument delay function based on the current easing.
;; The returned function takes STEP (going from 0 to `(1- TOTAL)')and TOTAL and returns the fraction of TOTAL-TIME.\"
;;   (let ((ef (smooth-scroll--get-easing-fn)))
;;     (lambda (step total)
;;       (let* ((x1 (/ (float step) total))
;;              (x2 (/ (float (1+ step)) total)))
;;         (- (funcall ef x2)
;;            (funcall ef x1))))))
" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 34 (face font-lock-function-name-face fontified t) 34 40 (fontified t) 40 173 (face font-lock-doc-face fontified t) 173 177 (fontified t) 177 182 (face font-lock-keyword-face fontified t) 182 204 (fontified t) 204 209 (face font-lock-comment-delimiter-face fontified t) 209 276 (face font-lock-comment-face fontified t) 276 279 (face font-lock-comment-delimiter-face fontified t) 279 393 (face font-lock-comment-face fontified t) 393 394 (face font-lock-comment-delimiter-face fontified t) 394 395 (face font-lock-comment-delimiter-face fontified t) 395 398 (face font-lock-comment-delimiter-face fontified t) 398 399 (face font-lock-comment-face fontified t) 399 402 (face font-lock-comment-face fontified t) 402 405 (face font-lock-comment-face fontified t) 405 406 (face font-lock-comment-face fontified t) 406 407 (face font-lock-comment-face fontified t) 407 408 (face font-lock-comment-face fontified t) 408 441 (face font-lock-comment-face fontified t) 441 442 (face font-lock-comment-delimiter-face fontified t) 442 443 (face font-lock-comment-delimiter-face fontified t) 443 448 (face font-lock-comment-delimiter-face fontified t) 448 449 (face font-lock-comment-face fontified t) 449 455 (face font-lock-comment-face fontified t) 455 469 (face font-lock-comment-face fontified t) 469 470 (face font-lock-comment-delimiter-face fontified t) 470 471 (face font-lock-comment-delimiter-face fontified t) 471 478 (face font-lock-comment-delimiter-face fontified t) 478 479 (face font-lock-comment-face fontified t) 479 483 (face font-lock-comment-face fontified t) 483 513 (face font-lock-comment-face fontified t) 513 514 (face font-lock-comment-delimiter-face fontified t) 514 515 (face font-lock-comment-delimiter-face fontified t) 515 529 (face font-lock-comment-delimiter-face fontified t) 529 563 (face font-lock-comment-face fontified t) 563 564 (face font-lock-comment-delimiter-face fontified t) 564 565 (face font-lock-comment-delimiter-face fontified t) 565 574 (face font-lock-comment-delimiter-face fontified t) 574 593 (face font-lock-comment-face fontified t) 593 594 (face font-lock-comment-delimiter-face fontified t) 594 595 (face font-lock-comment-delimiter-face fontified t) 595 607 (face font-lock-comment-delimiter-face fontified t) 607 627 (face font-lock-comment-face fontified t) 627 628 (face font-lock-comment-face fontified t)) . -1663) (undo-tree-id339 . -441) (undo-tree-id340 . -441) (undo-tree-id341 . -38) (undo-tree-id342 . -393) (undo-tree-id343 . -393) (undo-tree-id344 . -398) (undo-tree-id345 . -395) (undo-tree-id346 . -395) (undo-tree-id347 . -393) (undo-tree-id348 . -426) (undo-tree-id349 . -628) (undo-tree-id350 . -628) (undo-tree-id352 . -628) (undo-tree-id353 . -628) (undo-tree-id354 . -628) (undo-tree-id355 . -628)) ((1663 . 2291)) (26664 46613 33280 843000) 0 nil])
nil
([nil nil ((#("
  " 0 3 (fontified t)) . 2027) (undo-tree-id28 . -3)) ((2027 . 2030)) (26664 46449 118368 870000) 0 nil])
([nil nil ((661 . 662) (t 26664 46574 874637 367000)) ((#("
" 0 1 (fontified t)) . 661) (t 26664 46589 353734 791000)) (26664 46589 344687 657000) 0 nil])
([nil nil ((3698 . 3705) (t 26656 55345 157251 134000)) ((#("
      " 0 1 (fontified t) 1 7 (fontified t)) . 3698) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -7) (undo-tree-id249 . -7) (undo-tree-id250 . -7) (undo-tree-id251 . -7) (undo-tree-id252 . -7) (undo-tree-id253 . -7) (undo-tree-id254 . -7) (undo-tree-id255 . -7) (undo-tree-id256 . -7) (undo-tree-id257 . -7) (undo-tree-id258 . -7) (undo-tree-id259 . -7) (undo-tree-id260 . -7) (undo-tree-id261 . -7) (undo-tree-id262 . -7) (undo-tree-id263 . -7) (undo-tree-id264 . -7) (undo-tree-id265 . -7) (undo-tree-id266 . -7) (undo-tree-id267 . -7) (undo-tree-id268 . -7) (undo-tree-id269 . -7) (undo-tree-id270 . -7) (undo-tree-id271 . -7) (undo-tree-id272 . -7) (undo-tree-id273 . -7) (undo-tree-id274 . -7) (undo-tree-id275 . -7) (undo-tree-id276 . -7) (undo-tree-id277 . -7) (undo-tree-id278 . -7) (undo-tree-id279 . -7) (undo-tree-id280 . -7) (undo-tree-id281 . -7) (undo-tree-id282 . -7) (undo-tree-id283 . -7) (undo-tree-id284 . -7) (undo-tree-id285 . -7) (undo-tree-id286 . -7) (undo-tree-id287 . -7) (undo-tree-id288 . -7) (undo-tree-id289 . -7) (undo-tree-id290 . -7) (undo-tree-id291 . -7) (undo-tree-id292 . -7) (undo-tree-id293 . -7) (undo-tree-id294 . -7) (undo-tree-id295 . -7) (undo-tree-id296 . -7) (undo-tree-id297 . -7) (undo-tree-id298 . -7) (undo-tree-id299 . -7) (undo-tree-id300 . -7) (undo-tree-id301 . -7) (undo-tree-id302 . -7) (undo-tree-id303 . -7) (undo-tree-id304 . -7) (undo-tree-id305 . -7) (undo-tree-id306 . -7) (undo-tree-id307 . -7) (undo-tree-id308 . -7) (undo-tree-id309 . -7) (undo-tree-id310 . -7) (undo-tree-id311 . -7) (undo-tree-id312 . -1) (undo-tree-id313 . -7) (undo-tree-id314 . -7) (undo-tree-id315 . -7) (undo-tree-id316 . -7) (undo-tree-id317 . -7) (undo-tree-id318 . -7) (undo-tree-id319 . -7) (undo-tree-id320 . -7) (undo-tree-id321 . -7) (undo-tree-id322 . -7) (undo-tree-id323 . -7) (undo-tree-id324 . -7) (undo-tree-id325 . -7) (undo-tree-id326 . -7) (undo-tree-id327 . -7) (undo-tree-id328 . -7) (undo-tree-id329 . -7) (undo-tree-id330 . -7) (undo-tree-id331 . -7) (undo-tree-id332 . -7) (undo-tree-id333 . -7) (undo-tree-id334 . -7) (undo-tree-id335 . -7)) (26664 46448 794747 323000) 0 nil])
nil
([nil nil ((3706 . 3706) (3706 . 3707) (3705 . 3707) (#("(" 0 1 (fontified nil)) . -3705) (3705 . 3706)) ((#("(" 0 1 (fontified nil)) . 3705) (3705 . 3706) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 3705) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("p" 0 1 (fontified t)) . 3706) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1)) (26664 46448 418729 602000) 0 nil])
([nil nil ((3715 . 3717) (3713 . 3713) (3713 . 3715) (3708 . 3708) (3708 . 3713) (3707 . 3707) (3707 . 3708)) ((#("r" 0 1 (fontified nil)) . 3707) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("int c" 0 5 (fontified nil)) . 3708) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -5) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (#("ou" 0 2 (fontified nil)) . 3713) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (#("nt" 0 2 (fontified t)) . 3715)) (26664 46448 40301 313000) 0 nil])
([nil nil ((#("r" 0 1 (fontified nil)) . 3707) (undo-tree-id25 . -1) (#("int c" 0 5 (fontified nil)) . 3708) (undo-tree-id26 . -5) (#("ou" 0 2 (fontified nil)) . 3713) (undo-tree-id27 . -2) (#("nt" 0 2 (fontified t)) . 3715) (t 26664 45288 522058 570000)) ((3707 . 3717)) (26664 46447 958647 771000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . 3705) (3705 . 3706) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 3705) (undo-tree-id23 . -1) (#("p" 0 1 (fontified t)) . 3706) (undo-tree-id24 . -1)) ((3706 . 3707) (3705 . 3707) (#("(" 0 1 (fontified nil)) . 3705) (3705 . 3706)) (26664 46447 646184 129000) 0 nil])
([nil nil ((#("
      " 0 1 (fontified t) 1 7 (fontified t)) . 3698) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -7)) ((3698 . 3705)) (26664 46447 354417 540000) 0 nil])
([nil nil ((2027 . 2030)) ((#("
  " 0 3 (fontified t)) . 2027)) (26664 46447 78094 805000) 0 nil])
([nil nil ((#("
  " 0 3 (fontified t)) . 2027)) ((2027 . 2030)) (26664 46446 798599 999000) 0 nil])
([nil nil ((2027 . 2030)) ((#("
  " 0 3 (fontified t)) . 2027)) (26664 46444 758566 905000) 0 nil])
([nil nil ((#("
  " 0 3 (fontified t)) . 2027)) ((2027 . 2030)) (26664 46444 430696 878000) 0 nil])
([nil nil ((8895 . 8897) (8840 . 8842) (8818 . 8820) (8815 . 8816) (t 26664 46253 852477 312000)) ((#(")" 0 1 (fontified t)) . 8815) (#("  " 0 2 (fontified t)) . 8818) (#("  " 0 2 (fontified t)) . 8840) (#("  " 0 2 (fontified t)) . 8895)) (26664 46444 62599 517000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 8815) (#("  " 0 2 (fontified t)) . 8818) (#("  " 0 2 (fontified t)) . 8840) (#("  " 0 2 (fontified t)) . 8895) (t 26664 46280 136654 168000)) ((8895 . 8897) (8840 . 8842) (8818 . 8820) (8815 . 8816)) (26664 46443 686899 16000) 0 nil])
([nil nil ((8895 . 8897) (8840 . 8842) (8818 . 8820) (8815 . 8816) (t 26664 46282 746671 730000)) ((#(")" 0 1 (fontified t)) . 8815) (#("  " 0 2 (fontified t)) . 8818) (#("  " 0 2 (fontified t)) . 8840) (#("  " 0 2 (fontified t)) . 8895)) (26664 46442 746665 422000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 8815) (#("  " 0 2 (fontified t)) . 8818) (#("  " 0 2 (fontified t)) . 8840) (#("  " 0 2 (fontified t)) . 8895) (t 26664 46285 393689 541000)) ((8895 . 8897) (8840 . 8842) (8818 . 8820) (8815 . 8816)) (26664 46442 438508 16000) 0 nil])
([nil nil ((2027 . 2030)) ((#("
  " 0 3 (fontified t)) . 2027)) (26664 46441 970423 992000) 0 nil])
([nil nil ((#("
  " 0 3 (fontified t)) . 2027)) ((2027 . 2030)) (26664 46441 778824 537000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1056) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1057) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 1058 (t 26664 46307 887840 898000)) ((1056 . 1058)) (26664 46441 605914 758000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1102) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1102)) ((1102 . 1103) (1102 . 1103)) (26664 46441 432219 319000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1128) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1128)) ((1128 . 1129) (1128 . 1129)) (26664 46441 226486 407000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1170) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1170)) ((1170 . 1171) (1170 . 1171)) (26664 46440 946539 778000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1218) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1218)) ((1218 . 1219) (1218 . 1219)) (26664 46440 550591 327000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1246) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1246)) ((1246 . 1247) (1246 . 1247)) (26664 46440 94520 89000) 0 nil])
([nil nil ((1271 . 1272) (1239 . 1240) (1195 . 1196) (1138 . 1146) (#("       " 0 7 (fontified t)) . 1138) (1116 . 1117) (1064 . 1068) (#("   " 0 3 (fontified t)) . 1064) (undo-tree-id5 . -3) (943 . 947) (867 . 871) (1278 . 1279) (t 26664 46329 311985 52000)) ((#(")" 0 1 (fontified nil)) . 1278) (#("    " 0 4 (fontified t)) . 867) (#("    " 0 4 (fontified t)) . 943) (1064 . 1067) (#("    " 0 4 (fontified t)) . 1064) (#(" " 0 1 (fontified t)) . 1116) (1138 . 1145) (#("        " 0 8 (fontified t)) . 1138) (#(" " 0 1 (fontified t)) . 1195) (#(" " 0 1 (fontified t)) . 1239) (#(" " 0 1 (fontified t)) . 1271)) (26664 46439 750488 855000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1075) (undo-tree-id2 . -1) (#("f" 0 1 (fontified t)) . -1076) (undo-tree-id3 . -1) (#(" " 0 1 (fontified t)) . -1077) (undo-tree-id4 . -1) 1078) ((1075 . 1078)) (26664 46439 374917 554000) 0 nil])
([nil nil ((1077 . 1078) (1075 . 1075) (1075 . 1077)) ((#("ef" 0 2 (fontified nil)) . 1075) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (#(" " 0 1 (fontified t)) . 1077) (t 26664 46395 258428 787000)) (26664 46438 983182 967000) 0 nil])
([nil nil ((#("ef" 0 2 (fontified nil)) . 1075) (undo-tree-id0 . -2) (#(" " 0 1 (fontified t)) . 1077) (undo-tree-id1 . -1) (t 26664 46395 258428 787000)) ((1075 . 1078)) (26664 46438 618378 566000) 0 nil])
([nil nil ((1075 . 1078)) ((#("ef " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1075)) (26664 46438 230717 266000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 1278) (#("    " 0 4 (fontified t)) . 867) (#("    " 0 4 (fontified t)) . 943) (1064 . 1067) (#("    " 0 4 (fontified t)) . 1064) (#(" " 0 1 (fontified t)) . 1116) (1138 . 1145) (#("        " 0 8 (fontified t)) . 1138) (#(" " 0 1 (fontified t)) . 1195) (#(" " 0 1 (fontified t)) . 1239) (#(" " 0 1 (fontified t)) . 1271)) ((1271 . 1272) (1239 . 1240) (1195 . 1196) (1138 . 1146) (#("       " 0 7 (fontified t)) . 1138) (1116 . 1117) (1064 . 1068) (#("   " 0 3 (fontified t)) . 1064) (undo-tree-id31 . -3) (943 . 947) (867 . 871) (1278 . 1279)) (26664 46437 962566 44000) 0 nil])
([nil nil ((1246 . 1247) (1246 . 1247)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified nil)) . 1246) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1246)) (26664 46437 686408 780000) 0 nil])
([nil nil ((1218 . 1219) (1218 . 1219)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified nil)) . 1218) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1218)) (26664 46437 418480 559000) 0 nil])
([nil nil ((1170 . 1171) (1170 . 1171)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified nil)) . 1170) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1170)) (26664 46437 46347 434000) 0 nil])
([nil nil ((1128 . 1129) (1128 . 1129)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified nil)) . 1128) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1128)) (26664 46436 706310 880000) 0 nil])
([nil nil ((1102 . 1103) (1102 . 1103)) ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified nil)) . 1102) (#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1102)) (26664 46436 302300 431000) 0 nil])
([nil nil ((1056 . 1058)) ((#(";;" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t)) . 1056) (undo-tree-id29 . -2) (undo-tree-id30 . -2)) (26664 46435 986021 436000) 0 nil])
([nil nil ((2027 . 2030)) ((#("
  " 0 3 (fontified t)) . 2027)) (26664 46435 284694 238000) 0 nil])
([nil nil ((#("
  " 0 3 (fontified t)) . 2027)) ((2027 . 2030)) (26664 46435 284536 892000) 0 nil])
nil
