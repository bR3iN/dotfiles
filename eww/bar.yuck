(defvar scroll_perc 1)


(defwindow bar
  :monitor 0
  :geometry (geometry :x "0"
                      :y "0"
                      :width "100%"
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  :focusable false
  (centerbox :orientation "h"
             :class "bar_inner"
             (box :halign "start"
                  :space-evenly false
                  (applauncher)
                  (workspaces)
                  (kill-window))
             (clock)
             (box :halign "end"
                  :space-evenly false
                  ; Only works since :spacing 0
                  (window-helper)
                  (force-osk)
                  (volume-indicator :color "orange")
                  (vpn-indicator :color "yellow")
                  (navigation_toggle :color "magenta")
                  (button
                    :class "widget cyan"
                    :onclick "${EWW_CMD} open dashboard; "
                    "")
                  (battery :color "green" :color-critical "red"))))


(defwidget force-osk []
  (revealer
    :reveal osk_state
    :transition "slideleft"
    (button
      :class "widget"
      :onclick "busctl call --user sm.puri.OSK0 /sm/puri/OSK0 sm.puri.OSK0 SetVisible b true"
      "󰌌")))


(defvar window-helper-map '{ "org.pwmt.zathura": "(zathura-helper)" }')

(deflisten focused-window :initial "kitty"
  "./scripts/listen-focus.sh")

(defwidget window-helper []
  (revealer
    :transition "slideright"
    :duration "100ms"
    :reveal {window-helper-map[focused-window] != 'null'}
    (literal :content "${window-helper-map[focused-window] ?: ""}")))

(defwidget zathura-helper []
  (box
    :class "widget slim"
    :space-evenly false
    (button
      :onclick "wtype -k minus"
      :class "separator"
      :style "border-width: 0 1px 0 0; padding-right: 10px; padding-left: 14px"
      "󰍴")
    (button
      :class "separator"
      :style "border-width: 0 1px; padding: 0 10px"
      :onclick "wtype -k tab"
      "󰍜")
    (button
      :class "separator"
      :style "border-width: 0 1px; padding: 0 10px"
      :onclick "wtype -k equal"
      "󰘞")
    (button
      :class "separator"
      :style "border-width: 0 0 0 1px; padding-left: 10px; padding-right: 14px"
      :onclick "wtype -k plus"
      "󰐕")))


(defvar applauncher_open false)

(defwidget applauncher []
  (box :space-evenly false
       (revealer :reveal applauncher_open
                 :transition "slideleft"
                 (box :space-evenly false
                      (button :class "widget green" :onclick "wofi --show drun & ${EWW_CMD} update applauncher_open=false" "󱓞")
                      (button :class "widget cyan" :onclick "rofi-ff & ${EWW_CMD} update applauncher_open=false" "󰈹")
                      (button :class "widget yellow" :onclick "rofi-open & ${EWW_CMD} update applauncher_open=false" "󰈙")
                      (button :class "widget orange" :onclick "(cd; kitty) & ${EWW_CMD} update applauncher_open=false" "")
                      (button :class "widget red" :onclick "rofi-mpv & ${EWW_CMD} update applauncher_open=false" "󰎁")))
       (button :class "widget magenta ${applauncher_open ? " toggled" : ""}"
               :onclick {applauncher_open ? "${EWW_CMD} update applauncher_open=false" : "${EWW_CMD} update applauncher_open=true"}
               "")))


(defwidget simple_toggle [on off state statename]
  (button
    :class "widget${state ? " toggled" : ""}"
    :onclick {state ? "${off} & ${EWW_CMD} update ${statename}=false" : "${on} & ${EWW_CMD} update ${statename}=true"}
    (children)))


(defwidget simple_button [onclick]
  (button
    :class "widget"
    :onclick onclick
    (children)))


(defwidget cpu []
  (label
    :class "widget cpu"
    :text "${replace("0${round(EWW_CPU.avg < 100 ? EWW_CPU.avg : 99.0, 0)}", '.*([0-9.]{2})', '\\1')}% "))


(defwidget memory []
  (label
    :class "widget memory"
    :text "${round(EWW_RAM.used_mem / 1073741824, 1)}GiB "))


(defwidget clock []
  (label
    :class "widget clock"
    :text {formattime(EWW_TIME, "%H:%M")}))


(defwidget vpn-indicator [color]
  (button
    :onclick "rofi-vpn &"
    (label
      :class "widget ${EWW_NET['tun0'] != 'null' ? "${color} toggled" : "${color}"}"
      :text "嬨")))


(defwidget network []
  (label
    :class "widget network"
    :text ""))


(defvar volume_slider_visible false)

(defwidget volume-indicator [color]
  (eventbox
    :onscroll "if [ {} = up ]; then ${volume_set} +${scroll_perc}%; else ${volume_set} -${scroll_perc}%; fi &"
    :onclick "${volume_toggle}"
    (box :class "widget ${color}${volume.muted ? "" : " toggled"}"
         "${volume.muted ? "婢" : volume.volume > 100 ? "墳" : volume_icons[round(volume.volume / 50, 0)]}")))


(defvar bat_capacity_icons '["", "", "", "", "", "", "", "", "", "", ""]')
(defvar bat_status_icons '{"Charging": "", "Full": "", "Unknown": "󰂑", "Not charging": ""}')

(defwidget battery [color color-critical]
  (label
    :class "widget ${EWW_BATTERY.BAT0.status == 'Charging' ? "toggled ${color}" : EWW_BATTERY.BAT0.capacity <= 15 ? "toggled ${color-critical}" : "${color}"}"
    :text "${EWW_BATTERY.BAT0.capacity}% ${EWW_BATTERY.BAT0.status == 'Discharging' ? bat_capacity_icons[round(EWW_BATTERY.BAT0.capacity / 10, 0)] : bat_status_icons[EWW_BATTERY.BAT0.status]}"))

(defwidget workspace_button [focused urgent name]
  (button
    :class "widget${focused ? " green" : ""}${urgent ? " red toggled" : ""}"
    :onclick "swaymsg workspace ${name} > /dev/null"
    name))

; Outputs a multiple `workspace_button` instances
(deflisten workspaces :initial '(label)'
  './scripts/listen-workspaces.sh')

(defvar workspace_menu_visible true)

(defwidget kill-window []
  (revealer
    :reveal navigation_visible
    :duration "50ms"
    (button
      :class "widget red toggled"
      :onclick "killall wofi || swaymsg kill"
      "")))

(defwidget workspace_menu_drag []
  (button
    :class "widget"
    :onclick "${EWW_CMD} update workspace_menu_visible=false"
    ""))

(defwidget navigation_toggle [color]
  (button
    :class "widget ${color}${navigation_visible ? " toggled" : ""}"
    :onclick "${EWW_CMD} update navigation_visible=${! navigation_visible}"
    ""))

(defwidget workspace_menu []
  (revealer
    :transition "slideleft"
    :reveal workspace_menu_visible
    (box
      (workspace_menu_drag))))

(defwidget workspaces []
  (literal
    :content "(box :vexpand false
                   :space-evenly false
                   ${workspaces})"))
