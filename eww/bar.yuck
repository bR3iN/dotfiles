(defvar scroll_perc 1)


(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0"
                      :width "100%"
                      :height 25
                      :anchor "top center")
  :stacking "fg"
  :exclusive true
  :focusable false
  (bar))


(defwidget bar []
  (centerbox :orientation "h"
             :class "bar"
             (box :halign "start"
                  :space-evenly false
                  (workspaces))
             (box :halign "center"
                  :space-evenly false
                  (clock))
             (box :halign "end"
                  :space-evenly false
                  (navigation_toggle)
                  (brightness_slider)
                  (brightness)
                  (volume_slider)
                  (volume)
                  (cpu)
                  (memory)
                  (vpn)
                  (network)
                  (battery))))


(defwidget cpu []
  (label
    :class "widget cpu"
    :text "${replace("0${round(EWW_CPU.avg < 100 ? EWW_CPU.avg : 99.0, 0)}", '.*([0-9.]{2})', '\\1')}% "))


(defwidget memory []
  (label
    :class "widget memory"
    :text "${round(EWW_RAM.used_mem / 1073741824, 1)}GiB "))


(defwidget clock []
  (label
    :class "widget clock"
    :text {formattime(EWW_TIME, "%H:%M")}))


(defwidget vpn []
  (label
    :class "widget ${EWW_NET['tun0'] != 'null' ? "vpn_connected" : "vpn"}"
    :text "嬨"))


(defwidget network []
  (label
    :class "widget network"
    :text ""))


(deflisten brightness :initial 0
  './scripts/listen-brightness.sh')

(defvar brightness_slider_visible true)

(defvar brightness_set "brightnessctl -q --min-value=1 set")
(defvar brightness_icons '["", "", ""]')

(defwidget brightness []
  (box :class "widget brightness"
       (eventbox
         :onclick "${EWW_CMD} update brightness_slider_visible=true"
         :onscroll "if [ {} = up ]; then ${brightness_set} +${scroll_perc}% & else ${brightness_set} ${scroll_perc}%- & fi"
         "${brightness}% ${brightness_icons[round(brightness/50, 0)]}")))

(defwidget brightness_slider []
  ; Box-wrapping needed to correctly display borders
  (box :class "widget slim brightness_slider"
       (revealer :transition "slideright"
                 :reveal brightness_slider_visible
                 (eventbox
                   :onhoverlost "${EWW_CMD} update brightness_slider_visible=false"
                   (scale :class "scale"
                          :min 0
                          :max 101
                          :onchange "${brightness_set} {}%"
                          :value brightness)))))


(deflisten volume :initial '{"volume": "0", "muted": true}'
  './scripts/listen-volume.sh')

(defvar volume_slider_visible false)

(defvar volume_set "pactl set-sink-volume @DEFAULT_SINK@")
(defvar volume_toggle "pactl set-sink-mute @DEFAULT_SINK@ toggle")
(defvar volume_icons '["奄", "奔", "墳"]')

(defwidget volume []
  (box :class "widget ${volume.muted ? "volume" : "volume_highlighted"}"
       (eventbox
         :onscroll "if [ {} = up ]; then ${volume_set} +${scroll_perc}%; else ${volume_set} -${scroll_perc}%; fi &"
         :onclick "${volume_slider_visible ? "${volume_toggle} & ${EWW_CMD} update volume_slider_visible=false" : "${EWW_CMD} update volume_slider_visible=true"}"
         "${volume.volume}% ${volume.muted ? "婢" : volume.volume > 100 ? "墳" : volume_icons[round(volume.volume / 50, 0)]}")))

(defwidget volume_slider []
  ; Box-wrapping needed to correctly display bordersw/examples/eww-bar
  (box :class "widget slim ${volume.muted ? "volume" : "volume_highlighted"}"
       (revealer :transition "slideright"
                 :reveal volume_slider_visible
                 (eventbox
                   :onhoverlost "${EWW_CMD} update volume_slider_visible=false"
                   (scale :class "scale"
                          :min 0
                          :max 101
                          :onchange "${volume_set} {}%"
                          :value "${volume.volume}")))))


(defvar bat_capacity_icons '["", "", "", "", "", "", "", "", "", "", ""]')
(defvar bat_status_icons '{"Charging": "", "Full": "", "Unknown": "󰂑", "Not charging": ""}')

(defwidget battery []
  (label
    :class "widget battery${EWW_BATTERY.BAT0.status == 'Charging' ? '_charging' : EWW_BATTERY.BAT0.capacity <= 15 ? "_critical" : ""}"
    :text "${EWW_BATTERY.BAT0.capacity}% ${EWW_BATTERY.BAT0.status == 'Discharging' ? bat_capacity_icons[round(EWW_BATTERY.BAT0.capacity / 10, 0)] : bat_status_icons[EWW_BATTERY.BAT0.status]}"))


(defwidget workspace_button [focused urgent name]
  (button
    :class "ws_button${focused ? " focused" : ""}${urgent ? " urgent" : ""}"
    :onclick "swaymsg workspace ${name}"
    name))

; Outputs a multiple `workspace_button` instances
(deflisten workspaces :initial '(label)'
  './scripts/listen-workspaces.sh')

(defwidget workspaces []
  (literal :content "(box :vexpand true ${workspaces})"))
