(defvar toolbar_visible true)

(defwindow toolbar
  :monitor 0
  :geometry (geometry
              ; :x "0"
              ; :y "0"
              :height "100%"
              :anchor "left center"
              )
  ; Needed to not get pushed up by squeekboard
  :stacking "overlay"
  :exclusive true
  :focusable false
  (eventbox
    :class "bar_inner${toolbar_visible ? "" : " hidden"}"
    :onhover "${EWW_CMD} update toolbar_visible=true"
    :hexpand true
    (revealer
      :reveal toolbar_visible
      (centerbox
        :orientation "v"
        (toolbar_top)
        ; (zathura-helper)
        (window-helper)
        (button
          :class "toolbar_button blue"
          :valign "end"
          :onclick "sleep 0.2 && ${EWW_CMD} update toolbar_visible=false"
          :timeout "300ms"
          "")
        ))))

(defwidget toolbar_top []
  (box
    :orientation "v"
    :spacing 4
    :space-evenly false
    (launcher)
    (button
      :class "toolbar_button yellow${navigation_visible ? " toggled" : ""}"
      :onclick "${EWW_CMD} update navigation_visible=${! navigation_visible}"
      "")
    (button
      :class "toolbar_button orange"
      :onclick "busctl call --user sm.puri.OSK0 /sm/puri/OSK0 sm.puri.OSK0 SetVisible b true"
      "󰌌")
    ; (button
        ;   :class "toolbar_button orange${navigation_visible ? " toggled" : ""}"
        ;   :onclick "${EWW_CMD} close toolbar-${isleft ? "left" : "right"}; ${EWW_CMD} open toolbar-${isleft ? "right" : "left"}"
        ;   switch-icon)
    ))



(defvar launcher_extended false)

(defwidget launcher []
  (box
      :orientation "v"
      :space-evenly false
      (revealer
        :reveal launcher_extended
        :transition "slideup"
        (box
          :space-evenly false
          :spacing 4
          :orientation "v"
          :style "margin-bottom: 4px"
          (button
            :class "toolbar_button"
            :onclick "wofi --show drun & ${EWW_CMD} update launcher_extended=false"
            "󱓞")
          (button
            :class "toolbar_button"
            :onclick "rofi-ff & ${EWW_CMD} update launcher_extended=false"
            "󰈹")
          (button
            :class "toolbar_button"
            :onclick "rofi-open & ${EWW_CMD} update launcher_extended=false"
            "󰈙")
          (button
            :class "toolbar_button"
            :onclick "(cd; kitty) & ${EWW_CMD} update launcher_extended=false"
            "")
          (button
            :class "toolbar_button"
            :onclick "rofi-mpv & ${EWW_CMD} update launcher_extended=false"
            "󰎁")
          ; (button
              ;   :class "toolbar_button magenta"
              ;   :onclick "${EWW_CMD} update launcher_extended=false"
              ;   "")
          ))
      (button
        :class "toolbar_button green"
        :onclick "${EWW_CMD} update launcher_extended=${! launcher_extended}"
        "${launcher_extended ? "" : "󰍜"}")
      )
  )



; (defwindow bar
;   :monitor 0
;   :geometry (geometry :x "0"
;                       :y "0"
;                       :width "100%"
;                       :anchor "top center")
;   :stacking "fg"
;   :exclusive true
;   :focusable false
;   (centerbox :orientation "h"
;              :class "bar_inner"
;              (box :halign "start"
;                   :space-evenly false
;                   (applauncher)
;                   (workspaces)
;                   (kill-window))
;              (clock)
;              (box :halign "end"
;                   :space-evenly false
;                   ; Only works since :spacing 0
;                   (window-helper)
;                   (force-osk)
;                   (volume-indicator :color "orange")
;                   (vpn-indicator :color "yellow")
;                   (navigation_toggle :color "magenta")
;                   (button
;                     :class "widget cyan"
;                     :onclick "${EWW_CMD} open dashboard; "
;                     "")
;                   (battery :color "green" :color-critical "red"))))


; (defwidget force-osk []
;   (revealer
;     :reveal osk_state
;     :transition "slideleft"
;     (button
;       :class "widget"
;       :onclick "busctl call --user sm.puri.OSK0 /sm/puri/OSK0 sm.puri.OSK0 SetVisible b true"
;       "󰌌")))


(defvar window-helper-map '{ "org.pwmt.zathura": "(zathura-helper)" }')

(deflisten focused-window :initial "NONE"
  "./scripts/listen-focus.sh")

(defwidget window-helper []
  (revealer
    :transition "slideright"
    :duration "100ms"
    :reveal {window-helper-map[focused-window] != 'null'}
    (literal :content "${window-helper-map[focused-window] ?: ""}")))

(defwidget zathura-helper []
  (box
    :class "toolbar_button"
    :orientation 'v'
    :space-evenly false
    (button
      :class "separator"
      :style "border-width: 0 0 1px 0; padding: 4px 0"
      :onclick "wtype -k tab"
      "󰍜")
    (button
      :class "separator"
      :style "border-width: 1px 0; padding: 4px 0"
      :onclick "wtype -k plus"
      "󰐕")
    (button
      :class "separator"
      :style "border-width: 1px 0; padding: 4px 0"
      :onclick "wtype -k minus"
      "󰍴")
    (button
      :class "separator"
      :style "border-width: 1px 0; padding: 4px 0"
      :onclick "wtype -k equal"
      "󰘞")
    (button
      :class "separator"
      :style "border-width: 1px 0; padding: 4px 0"
      :onclick "wtype -M ctrl -k i -m ctrl"
      "󰮱")
    (button
      :class "separator"
      :style "border-width: 1px 0 0 0; padding: 4px 0"
      :onclick "wtype -M ctrl -k o -m ctrl"
      "󰮳")
    ))


; (defvar launcher_visible false)

; (defwidget applauncher []
;   (box :space-evenly false
;        (revealer :reveal launcher_visible
;                  :transition "slideleft"
;                  (box :space-evenly false
;                       (button :class "widget green" :onclick "wofi --show drun & ${EWW_CMD} update launcher_visible=false" "󱓞")
;                       (button :class "widget cyan" :onclick "rofi-ff & ${EWW_CMD} update launcher_visible=false" "󰈹")
;                       (button :class "widget yellow" :onclick "rofi-open & ${EWW_CMD} update launcher_visible=false" "󰈙")
;                       (button :class "widget orange" :onclick "(cd; kitty) & ${EWW_CMD} update launcher_visible=false" "")
;                       (button :class "widget red" :onclick "rofi-mpv & ${EWW_CMD} update launcher_visible=false" "󰎁")))
;        (button :class "widget magenta ${launcher_visible ? " toggled" : ""}"
;                :onclick {launcher_visible ? "${EWW_CMD} update launcher_visible=false" : "${EWW_CMD} update launcher_visible=true"}
;                "")))


; (defwidget simple_toggle [on off state statename]
;   (button
;     :class "widget${state ? " toggled" : ""}"
;     :onclick {state ? "${off} & ${EWW_CMD} update ${statename}=false" : "${on} & ${EWW_CMD} update ${statename}=true"}
;     (children)))


; (defwidget simple_button [onclick]
;   (button
;     :class "widget"
;     :onclick onclick
;     (children)))


; (defwidget cpu []
;   (label
;     :class "widget cpu"
;     :text "${replace("0${round(EWW_CPU.avg < 100 ? EWW_CPU.avg : 99.0, 0)}", '.*([0-9.]{2})', '\\1')}% "))


; (defwidget memory []
;   (label
;     :class "widget memory"
;     :text "${round(EWW_RAM.used_mem / 1073741824, 1)}GiB "))


; (defwidget clock []
;   (label
;     :class "widget clock"
;     :text {formattime(EWW_TIME, "%H:%M")}))


; (defwidget vpn-indicator [color]
;   (button
;     :onclick "rofi-vpn &"
;     (label
;       :class "widget ${EWW_NET['tun0'] != 'null' ? "${color} toggled" : "${color}"}"
;       :text "嬨")))


; (defwidget network []
;   (label
;     :class "widget network"
;     :text ""))


; (defvar volume_slider_visible false)

; (defwidget volume-indicator [color]
;   (eventbox
;     :onscroll "if [ {} = up ]; then ${volume_set} +${scroll_perc}%; else ${volume_set} -${scroll_perc}%; fi &"
;     :onclick "${volume_toggle}"
;     (box :class "widget ${color}${volume.muted ? "" : " toggled"}"
;          "${volume.muted ? "婢" : volume.volume > 100 ? "墳" : volume_icons[round(volume.volume / 50, 0)]}")))


; (defvar bat_capacity_icons '["", "", "", "", "", "", "", "", "", "", ""]')
; (defvar bat_status_icons '{"Charging": "", "Full": "", "Unknown": "󰂑", "Not charging": ""}')

; (defwidget battery [color color-critical]
;   (label
;     :class "widget ${EWW_BATTERY.BAT0.status == 'Charging' ? "toggled ${color}" : EWW_BATTERY.BAT0.capacity <= 15 ? "toggled ${color-critical}" : "${color}"}"
;     :text "${EWW_BATTERY.BAT0.capacity}% ${EWW_BATTERY.BAT0.status == 'Discharging' ? bat_capacity_icons[round(EWW_BATTERY.BAT0.capacity / 10, 0)] : bat_status_icons[EWW_BATTERY.BAT0.status]}"))

; (defwidget workspace_button [focused urgent name]
;   (button
;     :class "widget${focused ? " green" : ""}${urgent ? " red toggled" : ""}"
;     :onclick "swaymsg workspace ${name} > /dev/null"
;     name))

; ; Outputs a multiple `workspace_button` instances
; (deflisten workspaces :initial '(label)'
;   './scripts/listen-workspaces.sh')

; (defvar workspace_menu_visible true)

; (defwidget kill-window []
;   (revealer
;     :reveal navigation_visible
;     :duration "50ms"
;     (button
;       :class "widget red toggled"
;       :onclick "killall wofi || swaymsg kill"
;       "")))

; (defwidget workspace_menu_drag []
;   (button
;     :class "widget"
;     :onclick "${EWW_CMD} update workspace_menu_visible=false"
;     ""))

; (defwidget navigation_toggle [color]
;   (button
;     :class "widget ${color}${navigation_visible ? " toggled" : ""}"
;     :onclick "${EWW_CMD} update navigation_visible=${! navigation_visible}"
;     ""))

; (defwidget workspace_menu []
;   (revealer
;     :transition "slideleft"
;     :reveal workspace_menu_visible
;     (box
;       (workspace_menu_drag))))

; (defwidget workspaces []
;   (literal
;     :content "(box :vexpand false
;                    :space-evenly false
;                    ${workspaces})"))
